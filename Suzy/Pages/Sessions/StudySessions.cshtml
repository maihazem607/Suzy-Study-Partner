@page
@{
    ViewData["Title"] = "Study Sessions";
    ViewData["PageTitle"] = "Study Session";
    ViewData["SearchPlaceholder"] = "Search participants, notes...";
    ViewData["ShowInviteButton"] = "true";
    Layout = "_Layout";
}

@section Head {
    <link rel="stylesheet" href="~/css/study-sessions.css" />
    <style>
        /* Leave Session Confirmation Modal */
        .leave-session-modal {
            display: none;
            position: fixed;
            z-index: 10000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(3px);
        }

        .leave-session-modal-content {
            background-color: var(--color-light);
            border: 1px solid var(--color-border);
            margin: 15% auto;
            padding: 30px;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            text-align: center;
            color: var(--text-color);
        }

        .leave-session-modal h4 {
            color: var(--color-danger);
            margin-bottom: 20px;
            font-weight: 600;
        }

        .leave-session-modal p {
            margin-bottom: 25px;
            line-height: 1.5;
            color: var(--text-color);
        }

        .leave-session-modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .leave-session-modal-buttons button {
            padding: 10px 25px;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 100px;
        }

        .btn-leave-confirm {
            background: var(--color-danger);
            color: white;
        }

        .btn-leave-confirm:hover {
            background: #dc2626;
            transform: translateY(-1px);
        }

        .btn-leave-cancel {
            background: var(--color-text-muted);
            color: white;
        }

        .btn-leave-cancel:hover {
            background: #6b7280;
            transform: translateY(-1px);
        }

        .leaving-session-spinner {
            display: none;
            margin: 0 auto 20px;
        }
    </style>
}

<div class="page-container">
    @await Html.PartialAsync("_Sidebar")

    <div class="page-content">
        <div class="container-fluid p-3">
            <!-- Cover Photo Section -->
            <img src="~/lib/assets/StudySessionBG.jpeg" alt="Cover Photo" class="cover-photo">
            <!-- Main Session Layout -->
            <div class="row g-3">
                <!-- Left Column: Participants -->
                <div class="col-md-4">
                    <div class="participants-section">
                        <h6 class="mb-3">
                            <i class="fas fa-users me-2"></i>Participants (<span id="participantCount">0</span>)
                        </h6>

                        <div id="participantsList">
                            <!-- Participants will be loaded dynamically -->
                            <div class="text-center">
                                <i class="fas fa-spinner fa-spin"></i>
                                <p class="mt-2">Loading participants...</p>
                            </div>
                        </div>

                        <div class="mt-3 text-center">
                            <small id="sessionStats">Loading session info...</small>
                        </div>
                    </div>
                </div>

                <!-- Middle Column: Timer and Spotify -->
                <div class="col-md-4">
                    <div class="middle-column">
                        <!-- Timer Area -->
                        <div class="timer-area timer-area-main">
                            <div>
                                <h6 id="timerTypeHeader">
                                    <i class="fas fa-clock me-2"></i>Study Timer
                                </h6>
                                <div class="timer-display timer-display-main" id="timerDisplay">25:00</div>
                                <div class="timer-controls text-center">
                                    <button class="btn btn-sm me-1" id="startBtn" onclick="startTimer()">
                                        <i class="fas fa-play"></i> Start
                                    </button>
                                    <button class="btn btn-sm me-1" id="pauseBtn" onclick="pauseTimer()">
                                        <i class="fas fa-pause"></i> Pause
                                    </button>
                                    <button class="btn btn-sm me-1" id="resetBtn" onclick="resetTimer()">
                                        <i class="fas fa-stop"></i> Reset
                                    </button>
                                    <button class="btn btn-sm" id="breakBtn" onclick="startBreak()"
                                        style="display: none;">
                                        <i class="fas fa-coffee"></i> Break
                                    </button>
                                </div>
                            </div>
                            <div class="text-center">
                                <small id="timerDescription">Loading timer settings...</small>
                            </div>
                        </div>
                        <!-- Spotify Area -->
                        <div class="spotify-container">
                            <iframe data-testid="embed-iframe" style="border-radius:12px"
                                src="https://open.spotify.com/embed/playlist/4B3pmyimpUkTcu0sOfQlBS?utm_source=generator"
                                width="100%" height="352" frameBorder="0" allowfullscreen=""
                                allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                                loading="lazy"></iframe>
                        </div>
                    </div>
                </div>

                <!-- Right Column: SuzyVod and Todo -->
                <div class="col-md-4">
                    <div class="right-column">
                        <!-- Video Area -->
                        <div class="suzyvod-area">
                            <div class="video-container">
                                <img src="~/lib/assets/SuzyGif.gif" alt="SuzyGif" class="suzyvod-video">
                            </div>
                        </div>

                        <!-- Todo List Area -->
                        <div class="todo-area">
                            <h6><i class="fas fa-tasks me-2"></i>Todo List for This Session</h6>

                            <div id="todoList">
                                <!-- Todos will be loaded here dynamically -->
                            </div>

                            <div class="mt-2">
                                <div class="input-group input-group-sm mb-2" id="addTodoForm" style="display: none;">
                                    <input type="text" class="form-control" id="newTodoInput"
                                        placeholder="Enter new task..." maxlength="500">
                                    <button class="btn btn-success" type="button" onclick="saveTodo()">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-secondary" type="button" onclick="cancelAddTodo()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <button class="btn btn-sm" onclick="showAddTodoForm()">
                                    <i class="fas fa-plus me-1"></i>Add Task
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Leave Session Confirmation Modal -->
            <div id="leaveSessionModal" class="leave-session-modal">
                <div class="leave-session-modal-content">
                    <h4><i class="fas fa-exclamation-triangle me-2"></i>Leave Study Session?</h4>
                    <p>Are you sure you want to leave this study session?</p>
                    <p><strong>Your progress will be saved</strong> and you will be removed from the session
                        participants.</p>

                    <div class="leaving-session-spinner" id="leavingSpinner">
                        <i class="fas fa-spinner fa-spin fa-2x text-danger"></i>
                        <p class="mt-2">Leaving session...</p>
                    </div>

                    <div class="leave-session-modal-buttons" id="modalButtons">
                        <button type="button" class="btn-leave-cancel" id="btnStayInSession">
                            <i class="fas fa-times me-1"></i>Stay in Session
                        </button>
                        <button type="button" class="btn-leave-confirm" id="btnLeaveSession">
                            <i class="fas fa-sign-out-alt me-1"></i>Leave Session
                        </button>
                    </div>
                </div>
            </div>

            @section Scripts {
                <script>
                    let timerInterval;
                    let timeLeft = 25 * 60; // 25 minutes in seconds
                    let isRunning = false;
                    let todos = [];
                    let sessionData = null;
                    let sessionId = null;
                    let isBreakMode = false;
                    let originalStudyTime = 25 * 60;
                    let originalBreakTime = 5 * 60;

                    // Make sessionData and sessionId available globally for navbar
                    window.sessionData = null;
                    window.sessionId = null;

                    // Get session ID from URL parameters
                    const urlParams = new URLSearchParams(window.location.search);
                    sessionId = urlParams.get('sessionId');
                    window.sessionId = sessionId;

                    // Timer functions
                    function updateDisplay() {
                        const minutes = Math.floor(timeLeft / 60);
                        const seconds = timeLeft % 60;
                        document.getElementById('timerDisplay').textContent =
                            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                    }

                    function setTimerDuration(studyMinutes, breakMinutes) {
                        originalStudyTime = studyMinutes * 60;
                        originalBreakTime = breakMinutes * 60;
                        timeLeft = originalStudyTime;
                        isBreakMode = false;
                        updateDisplay();
                        updateTimerMode();
                    }

                    function updateTimerMode() {
                        const timerArea = document.querySelector('.timer-area');
                        const breakBtn = document.getElementById('breakBtn');
                        const body = document.body;

                        if (isBreakMode) {
                            timerArea.classList.add('break-mode');
                            body.classList.add('break-mode');
                            breakBtn.style.display = 'none';
                            document.getElementById('timerTypeHeader').innerHTML =
                                '<i class="fas fa-coffee me-2"></i>Break Time';
                        } else {
                            timerArea.classList.remove('break-mode');
                            body.classList.remove('break-mode');
                            breakBtn.style.display = timeLeft === 0 && !isRunning ? 'inline-block' : 'none';
                            document.getElementById('timerTypeHeader').innerHTML =
                                '<i class="fas fa-clock me-2"></i>Study Timer';
                        }
                    }

                    async function startTimer() {
                        if (!isRunning) {
                            // Call backend to start timer session
                            if (sessionId && !isBreakMode) {
                                try {
                                    const response = await fetch(`/api/StudySession/StartSession/${sessionId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        }
                                    });
                                    if (response.ok) {
                                        const result = await response.json();
                                        window.currentTimerSessionId = result.timerSessionId;
                                        console.log('Timer session started:', result.timerSessionId);
                                    } else {
                                        console.error('Failed to start timer session');
                                    }
                                } catch (error) {
                                    console.error('Error starting timer session:', error);
                                }
                            } else if (sessionId && isBreakMode) {
                                try {
                                    const response = await fetch(`/api/StudySession/StartBreak/${sessionId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        }
                                    });
                                    if (response.ok) {
                                        const result = await response.json();
                                        window.currentTimerSessionId = result.timerSessionId;
                                        console.log('Break timer started:', result.timerSessionId);
                                    } else {
                                        console.error('Failed to start break timer');
                                    }
                                } catch (error) {
                                    console.error('Error starting break timer:', error);
                                }
                            }

                            isRunning = true;
                            document.getElementById('startBtn').classList.add('active');
                            timerInterval = setInterval(() => {
                                if (timeLeft > 0) {
                                    timeLeft--;
                                    updateDisplay();
                                } else {
                                    // Timer finished
                                    clearInterval(timerInterval);
                                    isRunning = false;
                                    document.getElementById('startBtn').classList.remove('active');

                                    // End the current timer session
                                    if (window.currentTimerSessionId) {
                                        endTimerSession();
                                    }

                                    if (isBreakMode) {
                                        alert('Break time is over! Ready to study?');
                                        isBreakMode = false;
                                        timeLeft = originalStudyTime;
                                    } else {
                                        alert('Study session complete! Time for a break.');
                                    }
                                    updateDisplay();
                                    updateTimerMode();
                                }
                            }, 1000);
                        }
                    }

                    async function pauseTimer() {
                        if (isRunning) {
                            clearInterval(timerInterval);
                            isRunning = false;
                            document.getElementById('startBtn').classList.remove('active');

                            // End the current timer session when pausing
                            if (window.currentTimerSessionId) {
                                endTimerSession();
                            }
                        }
                    }

                    async function resetTimer() {
                        clearInterval(timerInterval);

                        // End current timer session if one is running
                        if (isRunning && window.currentTimerSessionId) {
                            endTimerSession();
                        }

                        isRunning = false;
                        isBreakMode = false; // Reset break mode when resetting timer
                        document.getElementById('startBtn').classList.remove('active');
                        timeLeft = originalStudyTime;
                        updateDisplay();
                        updateTimerMode();
                    }

                    async function endTimerSession() {
                        if (window.currentTimerSessionId) {
                            try {
                                const response = await fetch(`/api/StudySession/EndSession/${sessionId}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    }
                                });
                                if (response.ok) {
                                    const result = await response.json();
                                    console.log('Timer session ended:', result);
                                    window.currentTimerSessionId = null;
                                } else {
                                    console.error('Failed to end timer session');
                                }
                            } catch (error) {
                                console.error('Error ending timer session:', error);
                            }
                        }
                    }

                    async function recordSessionEndTime() {
                        if (sessionId) {
                            try {
                                const response = await fetch(`/api/StudySession/EndSession/${sessionId}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    }
                                });
                                if (response.ok) {
                                    console.log('Session end time recorded');
                                } else {
                                    console.error('Failed to record session end time');
                                }
                            } catch (error) {
                                console.error('Error recording session end time:', error);
                            }
                        }
                    }

                    function startBreak() {
                        isBreakMode = true;
                        timeLeft = originalBreakTime;
                        updateDisplay();
                        updateTimerMode();
                    }

                    function setupEventListeners() {
                        // Allow Enter key to save todo
                        document.getElementById('newTodoInput').addEventListener('keypress', function (e) {
                            if (e.key === 'Enter') {
                                saveTodo();
                            } else if (e.key === 'Escape') {
                                cancelAddTodo();
                            }
                        });
                    }

                    // Todo functions
                    async function loadTodos() {
                        try {
                            const url = sessionId ? `/api/Todo/GetTodos?studySessionId=${sessionId}` : '/api/Todo/GetTodos';
                            const response = await fetch(url);
                            if (response.ok) {
                                todos = await response.json();
                                renderTodos();
                            } else {
                                console.error('Failed to load todos');
                            }
                        } catch (error) {
                            console.error('Error loading todos:', error);
                        }
                    }

                    function renderTodos() {
                        const todoList = document.getElementById('todoList');

                        if (todos.length === 0) {
                            todoList.innerHTML = `
                                                        <div class="text-center text-muted py-3">
                                                            <i class="fas fa-tasks fa-2x mb-2"></i>
                                                            <p>No tasks yet. Add your first task to get started!</p>
                                                        </div>
                                                    `;
                            return;
                        }

                        todoList.innerHTML = '';

                        todos.forEach(todo => {
                            const todoItem = document.createElement('div');
                            todoItem.className = 'todo-item';
                            todoItem.innerHTML = `
                                                        <input type="checkbox" ${todo.isCompleted ? 'checked' : ''} 
                                                               onchange="toggleTodo(${todo.id})">
                                                        <span class="${todo.isCompleted ? 'todo-completed' : ''}" 
                                                              ondblclick="editTodo(${todo.id})">${todo.task}</span>
                                                        <button class="btn btn-sm btn-outline-danger ms-2" 
                                                                onclick="deleteTodo(${todo.id})" style="font-size: 0.7rem;">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    `;
                            todoList.appendChild(todoItem);
                        });
                    }

                    async function toggleTodo(id) {
                        const todo = todos.find(t => t.id === id);
                        if (!todo) return;

                        try {
                            const response = await fetch(`/api/Todo/${id}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    isCompleted: !todo.isCompleted
                                })
                            });

                            if (response.ok) {
                                todo.isCompleted = !todo.isCompleted;
                                todo.completedAt = todo.isCompleted ? new Date().toISOString() : null;
                                renderTodos();
                            } else {
                                console.error('Failed to update todo');
                            }
                        } catch (error) {
                            console.error('Error updating todo:', error);
                        }
                    }

                    async function deleteTodo(id) {
                        if (!confirm('Are you sure you want to delete this task?')) return;

                        try {
                            const response = await fetch(`/api/Todo/${id}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                todos = todos.filter(t => t.id !== id);
                                renderTodos();
                            } else {
                                console.error('Failed to delete todo');
                            }
                        } catch (error) {
                            console.error('Error deleting todo:', error);
                        }
                    }

                    function showAddTodoForm() {
                        document.getElementById('addTodoForm').style.display = 'flex';
                        document.getElementById('newTodoInput').focus();
                    }

                    function cancelAddTodo() {
                        document.getElementById('addTodoForm').style.display = 'none';
                        document.getElementById('newTodoInput').value = '';
                    }

                    async function saveTodo() {
                        const input = document.getElementById('newTodoInput');
                        const task = input.value.trim();

                        if (!task) return;

                        try {
                            const response = await fetch('/api/Todo/CreateTodo', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    task: task,
                                    studySessionId: sessionId,
                                    order: todos.length
                                })
                            });

                            if (response.ok) {
                                const newTodo = await response.json();
                                todos.push(newTodo);
                                renderTodos();
                                cancelAddTodo();
                            } else {
                                console.error('Failed to create todo');
                            }
                        } catch (error) {
                            console.error('Error creating todo:', error);
                        }
                    }

                    // Initialize on page load
                    document.addEventListener('DOMContentLoaded', function () {
                        // Clean up any previous break mode state
                        document.body.classList.remove('break-mode');

                        if (sessionId) {
                            loadSessionData();
                        } else {
                            // If no session ID, redirect to session manager
                            window.location.href = '/Sessions/SessionManager';
                            return;
                        }

                        loadTodos();
                        setupEventListeners();
                    });

                    async function loadSessionData() {
                        try {
                            const response = await fetch(`/api/StudySession/${sessionId}`);
                            if (response.ok) {
                                sessionData = await response.json();
                                window.sessionData = sessionData; // Make available globally
                                updateUIWithSessionData();
                            } else {
                                alert('Failed to load session data. Redirecting to session manager.');
                                window.location.href = '/Sessions/SessionManager';
                            }
                        } catch (error) {
                            console.error('Error loading session data:', error);
                            alert('Error loading session. Redirecting to session manager.');
                            window.location.href = '/Sessions/SessionManager';
                        }
                    }

                    function updateUIWithSessionData() {
                        if (!sessionData) return;

                        // Update page title
                        document.title = `Study Session: ${sessionData.title}`;

                        // Update navbar session title
                        const sessionTitleNavbar = document.getElementById('sessionTitleNavbar');
                        const sessionTitleText = document.getElementById('sessionTitleText');
                        const sessionActions = document.getElementById('sessionActions');
                        const deleteSessionBtn = document.getElementById('deleteSessionBtn');

                        if (sessionTitleNavbar && sessionTitleText) {
                            sessionTitleText.textContent = sessionData.title;
                            sessionTitleNavbar.classList.remove('d-none');
                            sessionTitleNavbar.classList.add('d-flex', 'align-items-center');
                        }

                        if (sessionActions) {
                            sessionActions.classList.remove('d-none');
                            sessionActions.classList.add('d-flex');
                        }

                        // Show delete button only for hosts
                        if (deleteSessionBtn && sessionData.IsHost) {
                            deleteSessionBtn.classList.remove('d-none');
                        }

                        // Update timer based on session settings
                        setTimerDuration(sessionData.studyDuration, sessionData.breakDuration);

                        // Update timer description
                        const timerDesc = document.getElementById('timerDescription');
                        if (timerDesc) {
                            switch (sessionData.timerType) {
                                case 0: // Pomodoro
                                    timerDesc.textContent = `Pomodoro: ${sessionData.studyDuration} min focus • ${sessionData.breakDuration} min break`;
                                    break;
                                case 1: // Flowmodoro
                                    timerDesc.textContent = 'Flowmodoro: Study until you feel like taking a break';
                                    break;
                                case 2: // Custom
                                    timerDesc.textContent = `Custom: ${sessionData.studyDuration} min focus • ${sessionData.breakDuration} min break`;
                                    break;
                            }
                        }

                        // Update participants display
                        updateParticipantsDisplay();

                        // Update session stats
                        document.getElementById('sessionStats').textContent =
                            `${sessionData.currentParticipants} of ${sessionData.maxParticipants} participants`;
                    }

                    function updateParticipantsDisplay() {
                        if (!sessionData) return;

                        const participantsList = document.getElementById('participantsList');
                        const participantCount = document.getElementById('participantCount');

                        participantCount.textContent = sessionData.currentParticipants;

                        if (sessionData.participants && sessionData.participants.length > 0) {
                            participantsList.innerHTML = sessionData.participants.map(participant => `
                                                        <div class="participant-item">
                                                            <div class="participant-avatar-small">
                                                                <i class="fas fa-user"></i>
                                                            </div>
                                                            <div class="participant-info">
                                                                <p class="participant-name">
                                                                    ${participant.name}
                                                                    ${participant.isHost ? '<span class="host-badge ms-1">Host</span>' : ''}
                                                                </p>
                                                                <p class="participant-status">
                                                                    Joined ${new Date(participant.joinedAt).toLocaleTimeString()}
                                                                </p>
                                                            </div>
                                                        </div>
                                                    `).join('');
                        } else {
                            participantsList.innerHTML = `
                                                        <div class="text-center text-muted">
                                                            <i class="fas fa-user-clock fa-2x mb-2"></i>
                                                            <p>Waiting for participants...</p>
                                                        </div>
                                                    `;
                        }
                    }

                    function setupEventListeners() {
                        // Allow Enter key to save todo
                        document.getElementById('newTodoInput').addEventListener('keypress', function (e) {
                            if (e.key === 'Enter') {
                                saveTodo();
                            } else if (e.key === 'Escape') {
                                cancelAddTodo();
                            }
                        });
                    }

                    // Session management functions
                    function copyInviteLink() {
                        if (sessionData && sessionData.inviteCode) {
                            const inviteText = `Join my study session "${sessionData.title}" with code: ${sessionData.inviteCode}`;
                            navigator.clipboard.writeText(inviteText).then(() => {
                                alert('Invite link copied to clipboard!');
                            }).catch(() => {
                                prompt('Copy this invite text:', inviteText);
                            });
                        } else if (sessionData && sessionData.isPublic) {
                            const shareUrl = `${window.location.origin}/Sessions/SessionManager`;
                            navigator.clipboard.writeText(`Join my study session "${sessionData.title}" at: ${shareUrl}`).then(() => {
                                alert('Session link copied to clipboard!');
                            }).catch(() => {
                                prompt('Copy this link:', shareUrl);
                            });
                        } else {
                            alert('This session cannot be shared.');
                        }
                    }

                    function leaveSession() {
                        if (confirm('Are you sure you want to leave this study session?')) {
                            // End any active timer session before leaving
                            if (window.currentTimerSessionId) {
                                endTimerSession();
                            }

                            // Call API to leave session
                            fetch(`/api/StudySession/LeaveSession/${sessionId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            }).then(response => {
                                if (response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error('Failed to leave session');
                                }
                            }).then(result => {
                                if (result.success) {
                                    // Hide navbar session elements
                                    const sessionTitleNavbar = document.getElementById('sessionTitleNavbar');
                                    const sessionActions = document.getElementById('sessionActions');

                                    if (sessionTitleNavbar) {
                                        sessionTitleNavbar.classList.add('d-none');
                                    }
                                    if (sessionActions) {
                                        sessionActions.classList.add('d-none');
                                    }

                                    // Redirect to session manager
                                    window.location.href = '/Sessions/SessionManager';
                                } else {
                                    alert(result.message || 'Failed to leave session');
                                }
                            }).catch(error => {
                                console.error('Error leaving session:', error);
                                alert('Error leaving session. Please try again.');
                            });
                        }
                    }

                    function deleteSession() {
                        if (confirm('Are you sure you want to delete this study session? This action cannot be undone and will remove all participants from the session.')) {
                            fetch(`/api/StudySession/DeleteSession/${sessionId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            }).then(response => {
                                if (response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error('Failed to delete session');
                                }
                            }).then(result => {
                                if (result.success) {
                                    alert('Session deleted successfully');

                                    // Hide navbar session elements
                                    const sessionTitleNavbar = document.getElementById('sessionTitleNavbar');
                                    const sessionActions = document.getElementById('sessionActions');

                                    if (sessionTitleNavbar) {
                                        sessionTitleNavbar.classList.add('d-none');
                                    }
                                    if (sessionActions) {
                                        sessionActions.classList.add('d-none');
                                    }

                                    // Redirect to session manager
                                    window.location.href = '/Sessions/SessionManager';
                                } else {
                                    alert(result.message || 'Failed to delete session');
                                }
                            }).catch(error => {
                                console.error('Error deleting session:', error);
                                alert('Error deleting session. Please try again.');
                            });
                        }
                    }

                    // Refresh participants periodically
                    setInterval(async () => {
                        if (sessionId && sessionData) {
                            try {
                                const response = await fetch(`/api/StudySession/${sessionId}`);
                                if (response.ok) {
                                    const updatedData = await response.json();
                                    if (updatedData.currentParticipants !== sessionData.currentParticipants) {
                                        sessionData = updatedData;
                                        updateParticipantsDisplay();
                                        document.getElementById('sessionStats').textContent =
                                            `${sessionData.currentParticipants} of ${sessionData.maxParticipants} participants`;
                                    }
                                }
                            } catch (error) {
                                console.error('Error refreshing session data:', error);
                            }
                        }
                    }, 10000); // Refresh every 10 seconds

                    // Cover photo upload handler
                    document.getElementById('coverUpload')?.addEventListener('change', function (e) {
                        if (e.target.files[0]) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                // You can add logic here to display the uploaded image
                                alert('Cover photo uploaded successfully!');
                            };
                            reader.readAsDataURL(e.target.files[0]);
                        }
                    });

                    // Page leave confirmation functionality
                    let isLeavingSession = false;
                    let pendingNavigation = null;

                    // Handle beforeunload event (browser close, refresh, direct URL navigation)
                    window.addEventListener('beforeunload', function (e) {
                        if (sessionId && !isLeavingSession) {
                            e.preventDefault();
                            e.returnValue = ''; // This triggers the browser's default confirmation dialog
                            return '';
                        }
                    });

                    // Handle internal navigation (clicking links, form submissions, etc.)
                    document.addEventListener('click', function (e) {
                        if (sessionId && !isLeavingSession) {
                            // Check if it's a navigation link (excluding session-specific actions)
                            const link = e.target.closest('a');
                            if (link && link.href) {
                                const currentUrl = window.location.href;
                                const linkUrl = link.href;

                                // Allow navigation within the same page or to specific actions
                                if (linkUrl.includes('#') ||
                                    linkUrl === currentUrl ||
                                    link.classList.contains('allow-navigation') ||
                                    link.hasAttribute('data-allow-navigation')) {
                                    return;
                                }

                                // Prevent navigation and show custom confirmation
                                e.preventDefault();
                                showLeaveSessionModal(linkUrl);
                            }
                        }
                    });

                    // Custom confirmation modal functions
                    function showLeaveSessionModal(targetUrl = null) {
                        pendingNavigation = targetUrl;
                        document.getElementById('leaveSessionModal').style.display = 'block';
                        document.body.style.overflow = 'hidden'; // Prevent background scrolling
                    }

                    function hideLeaveSessionModal() {
                        document.getElementById('leaveSessionModal').style.display = 'none';
                        document.body.style.overflow = 'auto'; // Restore scrolling
                        pendingNavigation = null;
                    }

                    function confirmLeaveSession() {
                        // Show loading spinner
                        document.getElementById('leavingSpinner').style.display = 'block';
                        document.getElementById('modalButtons').style.display = 'none';

                        isLeavingSession = true;

                        // End any active timer session before leaving
                        if (window.currentTimerSessionId) {
                            endTimerSession();
                        }

                        // Call the leave session API
                        fetch(`/api/StudySession/LeaveSession/${sessionId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            if (response.ok) {
                                return response.json();
                            } else {
                                throw new Error('Failed to leave session');
                            }
                        }).then(result => {
                            if (result.success) {
                                // Hide navbar session elements
                                const sessionTitleNavbar = document.getElementById('sessionTitleNavbar');
                                const sessionActions = document.getElementById('sessionActions');

                                if (sessionTitleNavbar) {
                                    sessionTitleNavbar.classList.add('d-none');
                                }
                                if (sessionActions) {
                                    sessionActions.classList.add('d-none');
                                }

                                // Navigate to target URL or default
                                setTimeout(() => {
                                    if (pendingNavigation) {
                                        window.location.href = pendingNavigation;
                                    } else {
                                        window.location.href = '/Sessions/SessionManager';
                                    }
                                }, 500);
                            } else {
                                isLeavingSession = false; // Reset flag on failure
                                hideLeaveSessionModal();
                                alert(result.message || 'Failed to leave session');
                            }
                        }).catch(error => {
                            isLeavingSession = false; // Reset flag on error
                            hideLeaveSessionModal();
                            console.error('Error leaving session:', error);
                            alert('Error leaving session. Please try again.');
                        });
                    }

                    // Modal event listeners
                    document.getElementById('btnStayInSession').addEventListener('click', hideLeaveSessionModal);
                    document.getElementById('btnLeaveSession').addEventListener('click', confirmLeaveSession);

                    // Close modal when clicking outside
                    document.getElementById('leaveSessionModal').addEventListener('click', function (e) {
                        if (e.target === this) {
                            hideLeaveSessionModal();
                        }
                    });

                    // Update the existing leaveSession function to use the new modal
                    window.originalLeaveSession = leaveSession;
                    leaveSession = function () {
                        showLeaveSessionModal();
                    };

                    // Handle browser navigation (back/forward buttons)
                    window.addEventListener('popstate', function (e) {
                        if (sessionId && !isLeavingSession) {
                            // Prevent the navigation
                            history.pushState(null, null, window.location.href);
                            showLeaveSessionModal();
                        }
                    });

                    // Push current state to enable popstate detection
                    if (sessionId) {
                        history.pushState(null, null, window.location.href);
                    }
                </script>
            </div>
        </div>
    </div>
}
