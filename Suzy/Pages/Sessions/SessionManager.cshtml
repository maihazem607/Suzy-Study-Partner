@page
@{
    ViewData["Title"] = "Study Sessions";
    ViewData["PageTitle"] = "Study Sessions";
    ViewData["SearchPlaceholder"] = "Search sessions...";
    Layout = "_Layout";
}

@section Head {
    <link rel="stylesheet" href="~/css/study-sessions.css" />
    <link rel="stylesheet" href="~/css/session-manager.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true">
}

<div class="page-container">
    @await Html.PartialAsync("_Sidebar")

    <div class="page-content">
        <div class="container-fluid p-3">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>Study Sessions</h2>
                <button class="btn btn-primary" onclick="showCreateForm()">
                    <i class="fas fa-plus me-2"></i>Create New Session
                </button>
            </div>

            <!-- Create Session Form (Initially Hidden) -->
            <div id="createSessionForm" class="create-session-form" style="display: none;">
                <h5><i class="fas fa-plus-circle me-2"></i>Create New Study Session</h5>

                <form id="sessionForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-section">
                                <label class="form-label">Session Title *</label>
                                <input type="text" class="form-control" id="sessionTitle" maxlength="200" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-section">
                                <label class="form-label">Max Participants</label>
                                <select class="form-control" id="maxParticipants">
                                    <option value="2">2 people</option>
                                    <option value="5">5 people</option>
                                    <option value="10" selected>10 people</option>
                                    <option value="20">20 people</option>
                                    <option value="50">50 people</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <label class="form-label">Description (Optional)</label>
                        <textarea class="form-control" id="sessionDescription" rows="2" maxlength="500"></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-section">
                                <label class="form-label">Timer Type</label>
                                <div>
                                    <input type="radio" id="pomodoro" name="timerType" value="0" checked>
                                    <label for="pomodoro" class="ms-1">Pomodoro</label>
                                    <div class="timer-definition">25 minutes of focused study followed by a 5-minute
                                        break</div>
                                </div>
                                <div class="mt-2">
                                    <input type="radio" id="flowmodoro" name="timerType" value="1">
                                    <label for="flowmodoro" class="ms-1">Flowmodoro</label>
                                    <div class="timer-definition">Study until you naturally feel like taking a break,
                                        then take a proportional break</div>
                                </div>
                                <div class="mt-2">
                                    <input type="radio" id="custom" name="timerType" value="2">
                                    <label for="custom" class="ms-1">Custom</label>
                                    <div class="timer-definition">Set your own study and break durations</div>
                                </div>

                                <div id="customTimerInputs" class="custom-timer-inputs">
                                    <div>
                                        <label class="form-label">Study Time (minutes)</label>
                                        <input type="number" class="form-control" id="studyDuration" min="1" max="180"
                                            value="25">
                                    </div>
                                    <div>
                                        <label class="form-label">Break Time (minutes)</label>
                                        <input type="number" class="form-control" id="breakDuration" min="1" max="60"
                                            value="5">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-section">
                                <label class="form-label">Session Visibility</label>
                                <div>
                                    <input type="radio" id="public" name="visibility" value="true" checked>
                                    <label for="public" class="ms-1">Public</label>
                                    <div class="timer-definition">Anyone can discover and join this session</div>
                                </div>
                                <div class="mt-2">
                                    <input type="radio" id="private" name="visibility" value="false">
                                    <label for="private" class="ms-1">Private</label>
                                    <div class="timer-definition">Only people with an invite code can join</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-create">
                            <i class="fas fa-rocket me-2"></i>Create Session
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="hideCreateForm()">Cancel</button>
                    </div>
                </form>
            </div>

            <!-- Join with Code Section -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" id="inviteCodeInput"
                            placeholder="Enter invite code to join private session">
                        <button class="btn btn-outline-primary" onclick="joinWithCode()">Join</button>
                    </div>
                </div>
            </div>

            <!-- Tabs -->
            <div class="tabs">
                <button class="tab-button active" onclick="switchTab('public')">Available Sessions</button>
                <button class="tab-button" onclick="switchTab('my')">My Sessions</button>
            </div>

            <!-- Available Sessions Tab -->
            <div id="publicTab" class="tab-content active">
                <div id="publicSessions">
                    <div class="empty-state">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p class="mt-2">Loading available sessions...</p>
                    </div>
                </div>
            </div>

            <!-- My Sessions Tab -->
            <div id="myTab" class="tab-content">
                <div id="mySessions">
                    <div class="empty-state">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p class="mt-2">Loading your sessions...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentTab = 'public';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function () {
            loadPublicSessions();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Timer type change handler
            document.querySelectorAll('input[name="timerType"]').forEach(radio => {
                radio.addEventListener('change', function () {
                    const customInputs = document.getElementById('customTimerInputs');
                    if (this.value === '2') { // Custom
                        customInputs.classList.add('show');
                    } else {
                        customInputs.classList.remove('show');
                    }
                });
            });

            // Form submission
            document.getElementById('sessionForm').addEventListener('submit', function (e) {
                e.preventDefault();
                createSession();
            });
        }

        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tab + 'Tab').classList.add('active');

            currentTab = tab;

            // Load data for the tab
            if (tab === 'public') {
                loadPublicSessions();
            } else {
                loadMySessions();
            }
        }

        async function loadPublicSessions() {
            try {
                const response = await fetch('/api/StudySession/GetAllAvailableSessions');
                if (response.ok) {
                    const sessions = await response.json();
                    renderSessions(sessions, 'publicSessions', false);
                } else {
                    console.error('Failed to load available sessions');
                }
            } catch (error) {
                console.error('Error loading available sessions:', error);
            }
        }

        async function loadMySessions() {
            try {
                const response = await fetch('/api/StudySession/GetMySessions');
                if (response.ok) {
                    const sessions = await response.json();
                    renderSessions(sessions, 'mySessions', true);
                } else {
                    console.error('Failed to load my sessions');
                }
            } catch (error) {
                console.error('Error loading my sessions:', error);
            }
        }

        function renderSessions(sessions, containerId, isMySession) {
            const container = document.getElementById(containerId);

            if (sessions.length === 0) {
                container.innerHTML = `
                                <div class="empty-state">
                                    <i class="fas fa-users fa-2x"></i>
                                    <p class="mt-2">${isMySession ? 'You haven\'t created any sessions yet.' : 'No sessions available.'}</p>
                                </div>
                            `;
                return;
            }

            container.innerHTML = sessions.map(session => `
                            <div class="session-card">
                                <div class="session-header">
                                    <div class="session-title">${session.title}</div>
                                    <div class="session-badge ${session.isPublic ? 'badge-public' : 'badge-private'}">
                                        ${session.isPublic ? 'Public' : 'Private'}
                                        ${session.requiresCode && !isMySession ? ' - Code Required' : ''}
                                    </div>
                                    ${isMySession ? `
                                        <div class="session-actions">
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    onclick="event.stopPropagation(); deleteSession(${session.id}, '${session.title}')"
                                                    title="Delete Session">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    ` : ''}
                                </div>
                    
                                <div class="session-clickable" onclick="${isMySession ? `joinSession(${session.id})` : (session.requiresCode ? `joinPrivateSession(${session.id}, '${session.title}')` : `joinSession(${session.id})`)}">
                                    ${session.description ? `<p class="text-muted mb-2">${session.description}</p>` : ''}
                        
                                    <div class="timer-info">
                                        <div class="timer-type">
                                            ${getTimerTypeDisplay(session.timerType, session.studyDuration, session.breakDuration)}
                                        </div>
                                        <div class="participants-info">
                                            <i class="fas fa-users"></i>
                                            ${session.currentParticipants}/${session.maxParticipants}
                                        </div>
                                    </div>
                        
                                    ${isMySession && !session.isPublic ? `
                                        <div class="mt-2">
                                            <small class="text-muted">Invite Code: <strong>${session.inviteCode}</strong></small>
                                        </div>
                                    ` : ''}
                            
                                    ${session.requiresCode && !isMySession ? `
                                        <div class="mt-2">
                                            <small class="text-info">
                                                <i class="fas fa-lock me-1"></i>
                                                Click to enter invite code
                                            </small>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        `).join('');
        }

        function getTimerTypeDisplay(timerType, studyDuration, breakDuration) {
            switch (timerType) {
                case 0: return 'Pomodoro (25/5)';
                case 1: return 'Flowmodoro';
                case 2: return `Custom (${studyDuration}/${breakDuration})`;
                default: return 'Unknown';
            }
        }

        function showCreateForm() {
            document.getElementById('createSessionForm').style.display = 'block';
            document.getElementById('sessionTitle').focus();
        }

        function hideCreateForm() {
            document.getElementById('createSessionForm').style.display = 'none';
            document.getElementById('sessionForm').reset();
            document.getElementById('customTimerInputs').classList.remove('show');
        }

        async function createSession() {
            const formData = {
                title: document.getElementById('sessionTitle').value,
                description: document.getElementById('sessionDescription').value,
                isPublic: document.querySelector('input[name="visibility"]:checked').value === 'true',
                maxParticipants: parseInt(document.getElementById('maxParticipants').value),
                timerType: parseInt(document.querySelector('input[name="timerType"]:checked').value),
                studyDuration: parseInt(document.getElementById('studyDuration').value),
                breakDuration: parseInt(document.getElementById('breakDuration').value)
            };

            try {
                const response = await fetch('/api/StudySession/CreateSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        hideCreateForm();

                        if (result.inviteCode) {
                            alert(`Session created! Invite code: ${result.inviteCode}`);
                        } else {
                            alert('Session created successfully!');
                        }

                        // Redirect to the session
                        window.location.href = `/Sessions/StudySessions?sessionId=${result.sessionId}`;
                    }
                } else {
                    alert('Failed to create session. Please try again.');
                }
            } catch (error) {
                console.error('Error creating session:', error);
                alert('An error occurred. Please try again.');
            }
        }

        async function joinSession(sessionId) {
            try {
                const response = await fetch('/api/StudySession/JoinSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ sessionId: sessionId })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = `/Sessions/StudySessions?sessionId=${result.sessionId}`;
                    } else {
                        alert(result.message || 'Failed to join session');
                    }
                } else {
                    alert('Failed to join session. Please try again.');
                }
            } catch (error) {
                console.error('Error joining session:', error);
                alert('An error occurred. Please try again.');
            }
        }

        async function joinPrivateSession(sessionId, sessionTitle) {
            const inviteCode = prompt(`Enter the invite code for "${sessionTitle}":`);
            if (!inviteCode) {
                return; // User cancelled
            }

            try {
                const response = await fetch('/api/StudySession/JoinSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sessionId: sessionId,
                        inviteCode: inviteCode.trim().toUpperCase()
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = `/Sessions/StudySessions?sessionId=${result.sessionId}`;
                    } else {
                        alert(result.message || 'Invalid invite code. Please try again.');
                    }
                } else {
                    alert('Failed to join session. Please check your invite code and try again.');
                }
            } catch (error) {
                console.error('Error joining private session:', error);
                alert('An error occurred. Please try again.');
            }
        }

        async function joinWithCode() {
            const inviteCode = document.getElementById('inviteCodeInput').value.trim();
            if (!inviteCode) {
                alert('Please enter an invite code');
                return;
            }

            try {
                const response = await fetch('/api/StudySession/JoinSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ inviteCode: inviteCode })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        window.location.href = `/Sessions/StudySessions?sessionId=${result.sessionId}`;
                    } else {
                        alert(result.message || 'Failed to join session');
                    }
                } else {
                    alert('Failed to join session. Please try again.');
                }
            } catch (error) {
                console.error('Error joining session:', error);
                alert('An error occurred. Please try again.');
            }
        }

        async function deleteSession(sessionId, sessionTitle) {
            if (!confirm(`Are you sure you want to delete the session "${sessionTitle}"?\n\nThis action cannot be undone and will remove all participants from the session.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/StudySession/DeleteSession/${sessionId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        alert('Session deleted successfully');
                        // Refresh the sessions list
                        loadMySessions();
                    } else {
                        alert(result.message || 'Failed to delete session');
                    }
                } else {
                    alert('Failed to delete session. Please try again.');
                }
            } catch (error) {
                console.error('Error deleting session:', error);
                alert('An error occurred while deleting the session. Please try again.');
            }
        }
    </script>
}

