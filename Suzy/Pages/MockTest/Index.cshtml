@page
@model Suzy.Pages.MockTest.IndexModel
@{
    ViewData["Title"] = "Mock Test";
    Layout = "_Layout";
}

<style>
    .futuristic-card { border-radius: 2rem; padding: 2rem; border: 1px solid #00bcd4; margin-top: 2rem; background: rgba(255, 255, 255, 0.85); }
    .futuristic-select, .futuristic-multiselect { width: 100%; padding: 0.7rem; border-radius: 14px; border: 2px solid #00bcd4; }
    .futuristic-btn { background: linear-gradient(145deg, #00acc1, #008ba3); border: none; padding: 0.85rem; color: white; border-radius: 16px; width: 100%; }
    .question-block { margin-bottom: 1.5rem; padding-bottom: 1rem; border-bottom: 1px solid #eee; }
    .correct-answer { background-color: #d4edda; border-color: #c3e6cb; border-radius: 5px; }
    .wrong-answer { background-color: #f8d7da; border-color: #f5c6cb; border-radius: 5px; }
    
    .modal-content { background-color: rgba(255, 255, 255, 0.85); border: 1px solid #00bcd4; border-radius: 2rem; backdrop-filter: blur(10px); }
    body.dark-mode .modal-content { background-color: rgba(18, 18, 18, 0.85); color: #f1f1f1; }
    .modal-header, .modal-footer { border-bottom: 1px solid rgba(0, 188, 212, 0.2); border-top: 1px solid rgba(0, 188, 212, 0.2); }
</style>

<div class="page-container">
    @await Html.PartialAsync("_Sidebar")

    <div class="page-content p-4">
        <div class="futuristic-card">
            @if (Model.TestResults != null)
            {
                <h3>Test Results</h3>
                <h4>Your Score: @Model.Score / @Model.TestResults.Count</h4>
                <hr />
                @foreach (var result in Model.TestResults)
                {
                    <div class="question-block">
                        <p><strong>@result.QuestionText</strong></p>
                        @foreach (var option in result.Options)
                        {
                            var isCorrect = option == result.CorrectAnswer;
                            var isUserChoice = option == result.UserAnswer;
                            string bgClass = "";
                            if (isCorrect) bgClass = "correct-answer";
                            else if (isUserChoice) bgClass = "wrong-answer";

                            <div class="p-2 my-1 @bgClass">
                                @option
                                @if(isCorrect) { <i class="fas fa-check-circle text-success ms-2"></i> }
                                @if(isUserChoice && !isCorrect) { <i class="fas fa-times-circle text-danger ms-2"></i> }
                            </div>
                        }
                    </div>
                }
                <a href="/MockTest/Index" class="futuristic-btn" style="text-decoration:none; display:block; text-align:center; max-width: 200px; margin: 2rem auto 0;">Create New Test</a>
            }
            else
            {
                <h3>Generate a New Mock Test</h3>
                <form id="generateForm" method="post" asp-page-handler="GenerateTest">
                    <div class="mb-3">
                        <label asp-for="SubjectId" class="form-label">1. Select Subject</label>
                        <select id="subject-select" asp-for="SubjectId" class="futuristic-select" asp-items="Model.SubjectOptions">
                            <option value="">-- Select a Subject --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="SelectedContent" class="form-label">2. Select Content (Hold Ctrl/Cmd to select multiple)</label>
                        <select id="content-select" asp-for="SelectedContent" class="futuristic-multiselect" multiple size="8">
                            <option value="" disabled>-- Select a subject first --</option>
                        </select>
                    </div>
                    <button type="button" id="generateTestBtn" class="futuristic-btn">
                        <span id="btn-text">Generate Test</span>
                        <span id="btn-spinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </form>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="quizModal" tabindex="-1" aria-labelledby="quizModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quizModalLabel">Mock Test in Progress</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="quizModalBody">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            const subjectSelect = $('#subject-select');
            const contentSelect = $('#content-select');

            subjectSelect.on('change', function () {
                const subjectId = $(this).val();
                contentSelect.empty().append('<option value="">Loading...</option>');
                if (!subjectId) {
                    contentSelect.empty().append('<option value="" disabled>-- Select a subject first --</option>');
                    return;
                }
                fetch(`?handler=ContentsForSubject&subjectId=${subjectId}`)
                    .then(response => response.json())
                    .then(data => {
                        contentSelect.empty();
                        if (data.length > 0) {
                            $.each(data, (i, item) => contentSelect.append($('<option>', { value: item.id, text: item.text })));
                        } else {
                            contentSelect.append('<option value="" disabled>-- No content found --</option>');
                        }
                    });
            });

            const generateBtn = $('#generateTestBtn');
            const generateForm = $('#generateForm');
            const quizModal = new bootstrap.Modal(document.getElementById('quizModal'));
            const quizModalBody = $('#quizModalBody');

            generateBtn.on('click', function () {
                const btnSpinner = $('#btn-spinner');
                const btnText = $('#btn-text');
                
                btnText.addClass('d-none');
                btnSpinner.removeClass('d-none');
                generateBtn.prop('disabled', true);

                const formData = new FormData(generateForm[0]);

                fetch('?handler=GenerateTest', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let quizHtml = '<form method="post" action="/MockTest/Index?handler=SubmitTest">';
                        quizHtml += $('input[name="__RequestVerificationToken"]').prop('outerHTML');
                        
                        data.questions.forEach((q, i) => {
                            quizHtml += `<div class="question-block">
                                            <p><strong>${i + 1}. ${q.questionText}</strong></p>`;
                            q.options.forEach((opt, j) => {
                                quizHtml += `<div class="form-check">
                                                <input class="form-check-input" type="radio" name="answers[${i}]" value="${opt}" id="q${i}-opt${j}" required />
                                                <label class="form-check-label" for="q${i}-opt${j}">${opt}</label>
                                            </div>`;
                            });
                            quizHtml += `</div>`;
                        });
                        quizHtml += '<button type="submit" class="futuristic-btn">Submit Test</button></form>';

                        quizModalBody.html(quizHtml);
                        quizModal.show();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An unexpected error occurred. Please try again.');
                })
                .finally(() => {
                    btnText.removeClass('d-none');
                    btnSpinner.addClass('d-none');
                    generateBtn.prop('disabled', false);
                });
            });
        });
    </script>
}