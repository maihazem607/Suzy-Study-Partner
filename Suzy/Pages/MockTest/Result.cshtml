@page "{id:int}"
@model Suzy.Pages.MockTest.ResultModel
@{
    ViewData["Title"] = "Test Result";
    Layout = "_Layout";
}

<style>
    /* Complete theme styles from your other pages for consistency */
    :root {
        --primary: #00bcd4;
        --danger: #f44336;
        --success: #4CAF50;
        --text-light: #f1f1f1;
        --text-dark: #1a1a1a;
        --card-bg-light: rgba(255, 255, 255, 0.85);
        --card-bg-dark: rgba(18, 18, 18, 0.85);
        --glow-dark: 0 0 20px #00bcd4;
        --glass-blur: blur(10px);
    }

    body.light-mode .futuristic-card {
        background-color: var(--card-bg-light);
        color: var(--text-dark);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        backdrop-filter: var(--glass-blur);
    }

    body.dark-mode .futuristic-card {
        background-color: var(--card-bg-dark);
        color: var(--text-light);
        box-shadow: var(--glow-dark);
        backdrop-filter: var(--glass-blur);
    }

    .futuristic-card {
        border-radius: 2rem;
        padding: 2rem;
        border: 1px solid var(--primary);
        transition: all 0.4s ease-in-out;
    }
    
    .futuristic-heading {
        text-align: center;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.2px;
        color: inherit;
    }

    .futuristic-btn {
        background: linear-gradient(145deg, #00acc1, #008ba3);
        border: none;
        padding: 0.85rem;
        color: white !important;
        font-weight: 600;
        border-radius: 16px;
        text-decoration: none;
        display: inline-block;
        box-shadow: 0 6px 12px rgba(0, 188, 212, 0.25);
        transition: all 0.3s ease-in-out;
    }
    
    .futuristic-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(0, 188, 212, 0.45);
    }
    
    .text-subtle {
        opacity: 0.75;
    }

    .question-block { 
        margin-bottom: 1.5rem; 
        padding-top: 1rem; 
        padding-bottom: 1rem; 
        border-bottom: 1px solid rgba(0, 188, 212, 0.2); 
    }
    .question-block:last-of-type { border-bottom: none; }
    .question-block p { font-size: 1.1rem; }
    
    .correct-answer { background-color: rgba(76, 175, 80, 0.15); border: 1px solid rgba(76, 175, 80, 0.4); border-radius: 8px; color: inherit; }
    .wrong-answer { background-color: rgba(244, 67, 54, 0.15); border: 1px solid rgba(244, 67, 54, 0.4); border-radius: 8px; color: inherit; }
    body.dark-mode .correct-answer { background-color: rgba(76, 175, 80, 0.3); }
    body.dark-mode .wrong-answer { background-color: rgba(244, 67, 54, 0.3); }

    .list-group-item { 
    color: inherit !important; /* This is the fix */
    border-color: rgba(0, 188, 212, 0.2) !important; 
}

    /* âœ… NEW RULES TO FIX ICON COLORS IN DARK MODE */
    body.dark-mode .text-success {
        color: #81c784 !important; /* A lighter, more visible green */
    }
    body.dark-mode .text-danger {
        color: #e57373 !important; /* A lighter, more visible red */
    }

</style>

<div class="page-container">
    @await Html.PartialAsync("_Sidebar")
    <div class="page-content p-4">
        @if (Model.TestResult != null)
        {
            <div class="futuristic-card">
                <h3 class="futuristic-heading">Test Result</h3>
                <p class="text-center text-subtle">Taken on: @Model.TestResult.Timestamp.ToString("g")</p>
                <h4 class="text-center mb-3">Your Score: @Model.TestResult.Score / @Model.TestResult.TotalQuestions</h4>
                
                @if (Model.TestResult.SourceDocuments.Any())
                {
                    <div class="mt-3 mb-4">
                        <h6 class="text-subtle">Test Generated From:</h6>
                        <ul class="list-group list-group-flush">
                        @foreach (var doc in Model.TestResult.SourceDocuments)
                        {
                            <li class="list-group-item bg-transparent">
                                <i class="fas fa-file-alt me-2 text-subtle"></i> <strong>@doc.SourceDocumentName</strong> (@doc.SourceDocumentType)
                            </li>
                        }
                        </ul>
                    </div>
                }

                <hr style="border-color: rgba(0, 188, 212, 0.3);" />

                @foreach (var result in Model.TestResult.Questions)
                {
                    <div class="question-block">
                        <p><strong>@result.QuestionText</strong></p>
                        
                        @foreach (var option in result.Options)
                        {
                            var isCorrect = option == result.CorrectAnswer;
                            var isUserChoice = option == result.UserAnswer;
                            string bgClass = "";
                            if (isCorrect) { bgClass = "correct-answer"; }
                            else if (isUserChoice) { bgClass = "wrong-answer"; }

                            <div class="p-2 my-1 @bgClass">
                                @option
                                @if(isCorrect) { <i class="fas fa-check-circle text-success ms-2"></i> }
                                @if(isUserChoice && !isCorrect) { <i class="fas fa-times-circle text-danger ms-2"></i> }
                            </div>
                        }
                    </div>
                }
                <a href="/MockTest/Index" class="futuristic-btn" style="text-decoration:none; display:block; text-align:center; max-width: 250px; margin: 2rem auto 0;">Create New Test</a>
            </div>
        }
        else
        {
            <div class="alert alert-warning">Test result not found.</div>
        }
    </div>
</div>