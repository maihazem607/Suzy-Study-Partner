@page
@model Suzy.Pages.Mock.IndexModel
@{
    ViewData["Title"] = "Upload Past Questions";
    Layout = "_Layout";
}

<div class="page-container">
    @await Html.PartialAsync("_Sidebar")

    <div class="page-content p-4">
        <h3>Upload Past Questions</h3>

        @if (TempData["Message"] != null)
        {
            <div class="alert alert-success">@TempData["Message"]</div>
        }

        <form method="post" enctype="multipart/form-data">
            
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

            <div class="mb-3">
                <label asp-for="SelectedCategoryId" class="form-label"></label>
                <select id="category-select" asp-for="SelectedCategoryId" class="form-select" asp-items="Model.CategoryOptions">
                    <option value="">-- Select Category --</option>
                </select>
                <span asp-validation-for="SelectedCategoryId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="SelectedNoteId" class="form-label"></label>
                <select id="note-select" asp-for="SelectedNoteId" class="form-select" asp-items="Model.NoteOptions">
                    <option value="">-- Select a category first --</option>
                </select>
                <span asp-validation-for="SelectedNoteId" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="UploadTitle" class="form-label"></label>
                <input asp-for="UploadTitle" class="form-control" />
                <span asp-validation-for="UploadTitle" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="UploadFile" class="form-label">Upload PDF</label>
                <input asp-for="UploadFile" class="form-control" type="file" />
                <span asp-validation-for="UploadFile" class="text-danger"></span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Upload</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            // Get references to the dropdowns
            const categorySelect = $('#category-select');
            const noteSelect = $('#note-select');

            // Add an event listener to the category dropdown
            categorySelect.on('change', function () {
                const categoryId = $(this).val();

                // Clear the notes dropdown
                noteSelect.empty();
                noteSelect.append('<option value="">Loading...</option>');

                if (!categoryId) {
                    noteSelect.empty();
                    noteSelect.append('<option value="">-- Select a category first --</option>');
                    return;
                }

                // Fetch the notes for the selected category using the new PageModel handler
                fetch(`?handler=Notes&categoryId=${categoryId}`)
                    .then(response => response.json())
                    .then(data => {
                        noteSelect.empty();
                        if (data.length > 0) {
                            noteSelect.append('<option value="">-- Select Note --</option>');
                            $.each(data, function (i, item) {
                                noteSelect.append($('<option>', {
                                    value: item.value,
                                    text: item.text
                                }));
                            });
                        } else {
                            noteSelect.append('<option value="">-- No notes found for this category --</option>');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching notes:', error);
                        noteSelect.empty();
                        noteSelect.append('<option value="">-- Error loading notes --</option>');
                    });
            });

            // If a category is already selected on page load (e.g., due to a validation error),
            // trigger the change event to load the corresponding notes and re-select the note if possible.
            if(categorySelect.val()){
                // We need to store the originally selected note to re-select it after the fetch completes.
                const originallySelectedNote = "@Model.SelectedNoteId";
                categorySelect.trigger('change');
                
                // Since fetch is asynchronous, we need to wait for it to finish.
                // A robust way is to use a custom event or check periodically.
                // For simplicity, a small timeout works for most cases.
                setTimeout(function() {
                    if (originallySelectedNote) {
                        noteSelect.val(originallySelectedNote);
                    }
                }, 500); // 500ms delay to allow fetch to complete
            }
        });
    </script>
}